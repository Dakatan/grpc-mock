// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: pkg/proto/echo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChainedEchoRequest_EchoType int32

const (
	ChainedEchoRequest_Echo1 ChainedEchoRequest_EchoType = 0
	ChainedEchoRequest_Echo2 ChainedEchoRequest_EchoType = 1
)

// Enum value maps for ChainedEchoRequest_EchoType.
var (
	ChainedEchoRequest_EchoType_name = map[int32]string{
		0: "Echo1",
		1: "Echo2",
	}
	ChainedEchoRequest_EchoType_value = map[string]int32{
		"Echo1": 0,
		"Echo2": 1,
	}
)

func (x ChainedEchoRequest_EchoType) Enum() *ChainedEchoRequest_EchoType {
	p := new(ChainedEchoRequest_EchoType)
	*p = x
	return p
}

func (x ChainedEchoRequest_EchoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainedEchoRequest_EchoType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_proto_echo_proto_enumTypes[0].Descriptor()
}

func (ChainedEchoRequest_EchoType) Type() protoreflect.EnumType {
	return &file_pkg_proto_echo_proto_enumTypes[0]
}

func (x ChainedEchoRequest_EchoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainedEchoRequest_EchoType.Descriptor instead.
func (ChainedEchoRequest_EchoType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_proto_echo_proto_rawDescGZIP(), []int{2, 0}
}

type EchoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EchoRequest) Reset() {
	*x = EchoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_echo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoRequest) ProtoMessage() {}

func (x *EchoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_echo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoRequest.ProtoReflect.Descriptor instead.
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_echo_proto_rawDescGZIP(), []int{0}
}

func (x *EchoRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type EchoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EchoResponse) Reset() {
	*x = EchoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_echo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoResponse) ProtoMessage() {}

func (x *EchoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_echo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoResponse.ProtoReflect.Descriptor instead.
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return file_pkg_proto_echo_proto_rawDescGZIP(), []int{1}
}

func (x *EchoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ChainedEchoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EchoType    ChainedEchoRequest_EchoType `protobuf:"varint,1,opt,name=echo_type,json=echoType,proto3,enum=mock.echo.ChainedEchoRequest_EchoType" json:"echo_type,omitempty"`
	EchoRequest *EchoRequest                `protobuf:"bytes,2,opt,name=echo_request,json=echoRequest,proto3" json:"echo_request,omitempty"`
}

func (x *ChainedEchoRequest) Reset() {
	*x = ChainedEchoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_proto_echo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainedEchoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainedEchoRequest) ProtoMessage() {}

func (x *ChainedEchoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_proto_echo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainedEchoRequest.ProtoReflect.Descriptor instead.
func (*ChainedEchoRequest) Descriptor() ([]byte, []int) {
	return file_pkg_proto_echo_proto_rawDescGZIP(), []int{2}
}

func (x *ChainedEchoRequest) GetEchoType() ChainedEchoRequest_EchoType {
	if x != nil {
		return x.EchoType
	}
	return ChainedEchoRequest_Echo1
}

func (x *ChainedEchoRequest) GetEchoRequest() *EchoRequest {
	if x != nil {
		return x.EchoRequest
	}
	return nil
}

var File_pkg_proto_echo_proto protoreflect.FileDescriptor

var file_pkg_proto_echo_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x63, 0x68, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x65, 0x63, 0x68,
	0x6f, 0x22, 0x27, 0x0a, 0x0b, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x28, 0x0a, 0x0c, 0x45, 0x63,
	0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x65,
	0x63, 0x68, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x63,
	0x68, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x63, 0x68, 0x6f, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x39, 0x0a, 0x0c, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x65, 0x63,
	0x68, 0x6f, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x65, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x08, 0x45,
	0x63, 0x68, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x63, 0x68, 0x6f, 0x31,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x63, 0x68, 0x6f, 0x32, 0x10, 0x01, 0x32, 0xc7, 0x01,
	0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x3a, 0x0a, 0x05, 0x45, 0x63, 0x68, 0x6f, 0x31, 0x12,
	0x16, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x45, 0x63, 0x68, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x65,
	0x63, 0x68, 0x6f, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x05, 0x45, 0x63, 0x68, 0x6f, 0x32, 0x12, 0x16, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e,
	0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x1d, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_proto_echo_proto_rawDescOnce sync.Once
	file_pkg_proto_echo_proto_rawDescData = file_pkg_proto_echo_proto_rawDesc
)

func file_pkg_proto_echo_proto_rawDescGZIP() []byte {
	file_pkg_proto_echo_proto_rawDescOnce.Do(func() {
		file_pkg_proto_echo_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_proto_echo_proto_rawDescData)
	})
	return file_pkg_proto_echo_proto_rawDescData
}

var file_pkg_proto_echo_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_proto_echo_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pkg_proto_echo_proto_goTypes = []interface{}{
	(ChainedEchoRequest_EchoType)(0), // 0: mock.echo.ChainedEchoRequest.EchoType
	(*EchoRequest)(nil),              // 1: mock.echo.EchoRequest
	(*EchoResponse)(nil),             // 2: mock.echo.EchoResponse
	(*ChainedEchoRequest)(nil),       // 3: mock.echo.ChainedEchoRequest
}
var file_pkg_proto_echo_proto_depIdxs = []int32{
	0, // 0: mock.echo.ChainedEchoRequest.echo_type:type_name -> mock.echo.ChainedEchoRequest.EchoType
	1, // 1: mock.echo.ChainedEchoRequest.echo_request:type_name -> mock.echo.EchoRequest
	1, // 2: mock.echo.Echo.Echo1:input_type -> mock.echo.EchoRequest
	1, // 3: mock.echo.Echo.Echo2:input_type -> mock.echo.EchoRequest
	3, // 4: mock.echo.Echo.ChainedEcho:input_type -> mock.echo.ChainedEchoRequest
	2, // 5: mock.echo.Echo.Echo1:output_type -> mock.echo.EchoResponse
	2, // 6: mock.echo.Echo.Echo2:output_type -> mock.echo.EchoResponse
	2, // 7: mock.echo.Echo.ChainedEcho:output_type -> mock.echo.EchoResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pkg_proto_echo_proto_init() }
func file_pkg_proto_echo_proto_init() {
	if File_pkg_proto_echo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_proto_echo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_echo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_proto_echo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainedEchoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_proto_echo_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_proto_echo_proto_goTypes,
		DependencyIndexes: file_pkg_proto_echo_proto_depIdxs,
		EnumInfos:         file_pkg_proto_echo_proto_enumTypes,
		MessageInfos:      file_pkg_proto_echo_proto_msgTypes,
	}.Build()
	File_pkg_proto_echo_proto = out.File
	file_pkg_proto_echo_proto_rawDesc = nil
	file_pkg_proto_echo_proto_goTypes = nil
	file_pkg_proto_echo_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EchoClient is the client API for Echo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoClient interface {
	Echo1(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	Echo2(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	ChainedEcho(ctx context.Context, in *ChainedEchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
}

type echoClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoClient(cc grpc.ClientConnInterface) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Echo1(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/mock.echo.Echo/Echo1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) Echo2(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/mock.echo.Echo/Echo2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) ChainedEcho(ctx context.Context, in *ChainedEchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/mock.echo.Echo/ChainedEcho", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServer is the server API for Echo service.
type EchoServer interface {
	Echo1(context.Context, *EchoRequest) (*EchoResponse, error)
	Echo2(context.Context, *EchoRequest) (*EchoResponse, error)
	ChainedEcho(context.Context, *ChainedEchoRequest) (*EchoResponse, error)
}

// UnimplementedEchoServer can be embedded to have forward compatible implementations.
type UnimplementedEchoServer struct {
}

func (*UnimplementedEchoServer) Echo1(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo1 not implemented")
}
func (*UnimplementedEchoServer) Echo2(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo2 not implemented")
}
func (*UnimplementedEchoServer) ChainedEcho(context.Context, *ChainedEchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainedEcho not implemented")
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_Echo1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Echo1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mock.echo.Echo/Echo1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Echo1(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_Echo2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Echo2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mock.echo.Echo/Echo2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Echo2(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_ChainedEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainedEchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).ChainedEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mock.echo.Echo/ChainedEcho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).ChainedEcho(ctx, req.(*ChainedEchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mock.echo.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo1",
			Handler:    _Echo_Echo1_Handler,
		},
		{
			MethodName: "Echo2",
			Handler:    _Echo_Echo2_Handler,
		},
		{
			MethodName: "ChainedEcho",
			Handler:    _Echo_ChainedEcho_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/echo.proto",
}
